import asyncio
import os
from aiortc import RTCPeerConnection, RTCSessionDescription
from aiortc.contrib.media import MediaPlayer

def create_player(file_path):
    if os.path.exists(file_path):
        return MediaPlayer(file_path)
    return None

async def run(pc, player, audio_path, video_path):
    @pc.on("iceconnectionstatechange")
    async def on_iceconnectionstatechange():
        print(f"ICE connection state is {pc.iceConnectionState}")
        if pc.iceConnectionState == "failed":
            await pc.close()

    # Add audio/video tracks if files are present
    if os.path.exists(video_path):
        video_player = create_player(video_path)
        if video_player:
            pc.addTrack(video_player.video)

    if os.path.exists(audio_path):
        audio_player = create_player(audio_path)
        if audio_player:
            pc.addTrack(audio_player.audio)

    # Exchange offer/answer

    sdp_offer = ""

    offer = RTCSessionDescription(sdp=sdp_offer, type="offer")
    await pc.setRemoteDescription(offer)
    answer = await pc.createAnswer()
    await pc.setLocalDescription(answer)

    print("Answer SDP:")
    print(pc.localDescription.sdp)

    # Wait for connection to be established
    await asyncio.sleep(30)

    if video_player:
        video_player.stop()
    if audio_player:
        audio_player.stop()

async def main():
    audio_path = "output.ogg"
    video_path = "output.h264"
    pc = RTCPeerConnection()

    try:
        await run(pc, None, audio_path, video_path)
    except Exception as e:
        print(e)
    finally:
        await pc.close()

if __name__ == "__main__":
    asyncio.run(main())
